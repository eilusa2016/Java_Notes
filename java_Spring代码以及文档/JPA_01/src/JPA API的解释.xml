<?xml version="1.0" encoding="UTF-8"?>
<data>
	<title>
		1，Persistence
		和EntityManagerFactory
	</title>
	<desc>
		Persistence 类是用于获取 EntityManagerFactory 实例。
		该类包含一个名为createEntityManagerFactory 的 静态方法 。
		createEntityManagerFactory
		方法有如下两个重载版本。
		带有一个参数的方法以 JPA 配置文件 persistence.xml 中的持久化单元名为参数
		带有两个参数的方法：前一个参数含义相同，后一个参数 Map类型，用于设置 JPA 的相关属性，这时将忽略其它地方设置的属性。
		Map
		对象的属性名必须是 JPA
		实现库提供商的名字空间约定的属性名


		EntityManagerFactory 接口主要用来创建
		EntityManager 实例。该接口约定了如下4个方法：
		createEntityManager()：用于创建实体管理器对象实例。
		createEntityManager(Map map)：用于创建实体管理器对象实例的重载方法，Map 参数用于提供
		EntityManager 的属性。
		isOpen()：检查 EntityManagerFactory
		是否处于打开状态。实体管理器工厂创建后一直处于打开状态，除非调用close()方法将其关闭。
		close()：关闭
		EntityManagerFactory 。 EntityManagerFactory
		关闭后将释放所有资源，isOpen()方法测试将返回
		false，其它方法将不能调用，否则将导致IllegalStateException异常。



	</desc>
	<title>
		2，EntityManager#find
		EntityManager#getReference
		EntityManager#persistence
		EntityManager#remove
	</title>
	<desc>
		在 JPA 规范中, EntityManager 是完成持久化操作的核心对象。实体作为普通 Java 对象，只有在调用
		EntityManager 将其持久化后才会变成持久化对象。EntityManager 对象在一组实体类与底层数据源之间进行 O/R
		映射的管理。它可以用来管理和更新 Entity Bean, 根椐主键查找 Entity Bean, 还可以通过JPQL语句查询实体。
		实体的状态:
		新建状态: 新创建的对象，尚未拥有持久性主键。
		持久化状态：已经拥有持久性主键并和持久化建立了上下文环境
		游离状态：拥有持久化主键，但是没有与持久化建立上下文环境
		删除状态: 拥有持久化主键，已经和持久化建立上下文环境，但是从数据库中删除。



		find (Class
		<T>
			entityClass,Object primaryKey)：返回指定的 OID
			对应的实体类对象，如果这个实体存在于当前的持久化环境，则返回一个被缓存的对象；否则会创建一个新的 Entity,
			并加载数据库中相关信息；若 OID 不存在于数据库中，则返回一个
			null。第一个参数为被查询的实体类类型，第二个参数为待查找实体的主键值。
			getReference (Class
		</T>
		entityClass,Object primaryKey)：与find()方法类似，不同的是：如果缓存中不存在指定的
		Entity,
		EntityManager 会创建一个 Entity 类的代理，但是不会立即加载数据库中的信息，只有第一次真正使用此
		Entity
		的属性才加载，所以如果此 OID 在数据库不存在，getReference() 不会返回 null 值,
		而是抛出EntityNotFoundException
		persist (Object entity)：用于将新创建的 Entity 纳入到
		EntityManager 的管理。该方法执行后，传入 persist() 方法的 Entity 对象转换成持久化状态。
		如果传入
		persist() 方法的 Entity 对象已经处于持久化状态，则 persist() 方法什么都不做。
		如果对删除状态的 Entity
		进行 persist() 操作，会转换为持久化状态。
		如果对游离状态的实体执行 persist() 操作，可能会在 persist()
		方法抛出
		EntityExistException(也有可能是在flush或事务提交后抛出)


		remove (Object
		entity)：删除实例。如果实例是被管理的，即与数据库实体记录关联，则同时会删除关联的数据库记录
	</desc>
	<title>
		3，EntityManager#merge
	</title>
	<desc>
		merge (T entity)：merge() 用于处理 Entity 的同步。即数据库的插入和更新操作

	</desc>
	<title>
		4，EntityManager 其他方法
	</title>
	<desc>
		flush ()：同步持久上下文环境，即将持久上下文环境的所有未保存实体的状态信息保存到数据库中。
		setFlushMode
		(FlushModeType flushMode)：设置持久上下文环境的Flush模式。参数可以取2个枚举
		FlushModeType.AUTO 为自动更新数据库实体，
		FlushModeType.COMMIT 为直到提交事务时才更新数据库记录。
		getFlushMode ()：获取持久上下文环境的Flush模式。返回FlushModeType类的枚举值。

		用数据库实体记录的值更新实体对象的状态，即更新实例的属性值。
		clear
		()：清除持久上下文环境，断开所有关联的实体。如果这时还有未提交的更新则会被撤消。
		contains (Object
		entity)：判断一个实例是否属于当前持久上下文环境管理的实体。
		isOpen ()：判断当前的实体管理器是否是打开状态。
		getTransaction ()：返回资源层的事务对象。EntityTransaction实例可以用于开始和提交多个事务。
		close
		()：关闭实体管理器。之后若调用实体管理器实例的方法或其派生的查询对象的方法都将抛出 IllegalstateException
		异常，除了getTransaction 和 isOpen方法(返回 false)。不过，当与实体管理器关联的事务处于活动状态时，调用
		close 方法后持久上下文将仍处于被管理状态，直到事务完成。



		createQuery (String qlString)：创建一个查询对象。
		createNamedQuery (String name)：根据命名的查询语句块创建查询对象。参数为命名的查询语句。
		createNativeQuery (String sqlString)：使用标准 SQL语句创建查询对象。参数为标准SQL语句字符串。
		createNativeQuery (String sqls, String
		resultSetMapping)：使用标准SQL语句创建查询对象，并指定返回结果集 Map的 名称。
	</desc>
	<title>
		5，EntityTransaction
	</title>
	<desc>
		EntityTransaction 接口用来管理资源层实体管理器的事务操作。通过调用实体管理器的getTransaction方法
		获得其实例。
		begin ()
		用于启动一个事务，此后的多个数据库操作将作为整体被提交或撤消。若这时事务已启动则会抛出
		IllegalStateException 异常。
		commit ()
		用于提交当前事务。即将事务启动以后的所有数据库更新操作持久化至数据库中。
		rollback ()
		撤消(回滚)当前事务。即撤消事务启动后的所有数据库更新操作，从而不对数据库产生影响。
		setRollbackOnly ()
		使当前事务只能被撤消。
		getRollbackOnly ()
		查看当前事务是否设置了只能撤消标志。
		isActive ()
		查看当前事务是否是活动的。如果返回true则不能调用begin方法，否则将抛出 IllegalStateException 异常；如果返回
		false 则不能调用 commit、rollback、setRollbackOnly 及 getRollbackOnly 方法，否则将抛出
		IllegalStateException 异常。
	</desc>
	<title>
		注解外键列的列名
		@JoinColumn(name = "CUSTOMER_ID")
		注解多对一  其中fetch是加载celve
		@ManyToOne(fetch = FetchType.LAZY)
	</title>
</data>