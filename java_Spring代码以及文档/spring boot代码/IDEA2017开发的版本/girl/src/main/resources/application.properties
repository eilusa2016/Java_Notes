##默认是8080  这里配置成8081
server.port=8081
##项目的根
#server.context-path=/
#数据库的配置
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
#一般的属性配置
#person.name=123

#springMvc视图解析路径
#spring.mvc.view.prefix=WEB_INF/views/
#spring.mvc.view.suffix=.jsp

#Spring boot指定静态资源  在resources下的
#spring.resources.static-locations==classpath:/static



#AOP 统一日志处理,AOP不需要配置文件来配置  全部都是注解,
#@Aspect//这个是一个切面
#@Component//这个是引入spring容器中
#public class HttpAspect
#  //这是一个切点
#   @Pointcut("execution(public * com.xjb.controller.PersonController.*(..))")
#   public void PersonPointCut(){}
#
#   //@Before("execution(public * com.xjb.controller.PersonController.*(..))")
#   @Before("PersonPointCut()")//使用切点
#   public void log(JoinPoint joinPoint){
#       System.out.println(joinPoint.getArgs());
#   }

#可以统一异常@ControllerAdvice
#@ControllerAdvice
#public class ExceptionHandlers
#    @ExceptionHandler(value =PersonException.class )//处理的异常的类型  这个可以自定义
#    @ResponseBody
#    public ExceptionResult handleException(HttpServletRequest request, PersonException ex){
#        int errorCode=ex.getCode();
#        ExceptionResult error=new ExceptionResult("异常",errorCode,ex.getMsg());
#        loger.error(ex.getMsg());
#        return error;
#    }

#spring boot 配置:选择开发环境  还是生产环境   配置文件的的 *-dev
#spring.profiles.active=dev

